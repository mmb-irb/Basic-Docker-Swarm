services:
  apache:
    image: apache_image   # name of apache image
    build:
      context: ./apache   # folder to search Dockerfile for this image
    ports:
      - "${APACHE_HTTP_PORT}:80"
      - "${APACHE_HTTPS_PORT}:443"
    networks:
      - webnet
    deploy:
      replicas: ${APACHE_REPLICAS}  # Ensure this service is not deployed by default as it is a one-time task
      resources:
        limits:
          cpus: ${APACHE_CPU_LIMIT}   # Specify the limit number of CPUs
          memory: ${APACHE_MEMORY_LIMIT}   # Specify the limit memory
        reservations:
          cpus: ${APACHE_CPU_RESERVATION}   # Specify the reserved number of CPUs
          memory: ${APACHE_MEMORY_RESERVATION}   # Specify the reserved memory

  loader:
    image: loader_image   # name of loader image
    build:
      context: ./loader   # folder to search Dockerfile for this image
      args:
        DB_HOST: ${DB_HOST} 
        DB_PORT: ${DB_PORT}
        DB_DATABASE: ${DB_DATABASE} 
        DB_AUTHSOURCE: ${DB_AUTHSOURCE} 
        LOADER_DB_LOGIN: ${LOADER_DB_LOGIN}
        LOADER_DB_PASSWORD: ${LOADER_DB_PASSWORD} 
    volumes:
      - loader_volume:/data   # path from where the data will be taken
    networks:
      - my_network
    deploy:
      replicas: ${LOADER_REPLICAS}  # Ensure this service is not deployed by default as it is a one-time task
      resources:
        limits:
          cpus: ${LOADER_CPU_LIMIT}   # Specify the limit number of CPUs
          memory: ${LOADER_MEMORY_LIMIT}   # Specify the limit memory
        reservations:
          cpus: ${LOADER_CPU_RESERVATION}   # Specify the reserved number of CPUs
          memory: ${LOADER_MEMORY_RESERVATION}   # Specify the reserved memory

  website:
    image: website_image   # name of website image
    build:
      context: ./website  # folder to search Dockerfile for this image
      args:
        DB_HOST: ${DB_HOST}
        DB_PORT: ${DB_PORT}
        DB_DATABASE: ${DB_DATABASE}
        DB_AUTHSOURCE: ${DB_AUTHSOURCE}
        WEBSITE_DB_LOGIN: ${WEBSITE_DB_LOGIN}
        WEBSITE_DB_PASSWORD: ${WEBSITE_DB_PASSWORD}
        WEBSITE_BASE_URL_DEVELOPMENT: ${WEBSITE_BASE_URL_DEVELOPMENT}
        WEBSITE_BASE_URL_STAGING: ${WEBSITE_BASE_URL_STAGING}
        WEBSITE_BASE_URL_PRODUCTION: ${WEBSITE_BASE_URL_PRODUCTION}
        WEBSITE_CUSTOM: ${WEBSITE_CUSTOM}
    depends_on:
      - mongodb
    ports:
      - "${WEBSITE_PORT}:3001"   # port mapping, be aware that the second port is the same exposed in the website/Dockerfile
    networks:
      - my_network
      - webnet
    deploy:
      replicas: ${WEBSITE_REPLICAS}   # Specify the number of replicas for Docker Swarm
      resources:
        limits:
          cpus: ${WEBSITE_CPU_LIMIT}   # Specify the limit number of CPUs
          memory: ${WEBSITE_MEMORY_LIMIT}   # Specify the limit memory
        reservations:
          cpus: ${WEBSITE_CPU_RESERVATION}   # Specify the reserved number of CPUs
          memory: ${WEBSITE_MEMORY_RESERVATION}   # Specify the reserved memory
      restart_policy:
        condition: any   # Restart always
      update_config:
        order: start-first  # Priority over other services

  mongodb:
    image: mongo:6
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    ports:
      - "${DB_PORT}:27017"
    volumes:
      - ${DB_VOLUME_PATH}:/data/db   # path where the database will be stored (outside the container, in the host machine)
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro   # path to the initialization script
    networks:
      - my_network
    deploy:
      replicas: ${DB_REPLICAS}   # Specify the number of replicas for Docker Swarm
      resources:
        limits:
          cpus: ${DB_CPU_LIMIT}    # Specify the limit number of CPUs
          memory: ${DB_MEMORY_LIMIT}   # Specify the limit memory
        reservations:
          cpus: ${DB_CPU_RESERVATION}   # Specify the reserved number of CPUs
          memory: ${DB_MEMORY_RESERVATION}   # Specify the reserved memory
      restart_policy:
        condition: on-failure   # Restart only on failure

volumes:
  loader_volume:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${LOADER_VOLUME_PATH}   # bind the volume to LOADER_VOLUME_PATH on the host

networks:
  my_network: 
    external: true   # Use an external network
  webnet:
    name: webnet   # Name of the network
    driver: overlay   # Use an overlay network